//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NuGet {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class NuGetResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal NuGetResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("NuGet.NuGetResources", typeof(NuGetResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous command &apos;{0}&apos;. Possible values: {1}..
        /// </summary>
        internal static string AmbiguousCommand {
            get {
                return ResourceManager.GetString("AmbiguousCommand", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Ambiguous option &apos;{0}&apos;. Possible values: {1}..
        /// </summary>
        internal static string AmbiguousOption {
            get {
                return ResourceManager.GetString("AmbiguousOption", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Building project for target framework &apos;{0}&apos;..
        /// </summary>
        internal static string BuildingProjectTargetingFramework {
            get {
                return ResourceManager.GetString("BuildingProjectTargetingFramework", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API key for the server..
        /// </summary>
        internal static string CommandApiKey {
            get {
                return ResourceManager.GetString("CommandApiKey", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to WARNING: {0}.
        /// </summary>
        internal static string CommandLine_Warning {
            get {
                return ResourceManager.GetString("CommandLine_Warning", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} (y/N) .
        /// </summary>
        internal static string ConsoleConfirmMessage {
            get {
                return ResourceManager.GetString("ConsoleConfirmMessage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to y.
        /// </summary>
        internal static string ConsoleConfirmMessageAccept {
            get {
                return ResourceManager.GetString("ConsoleConfirmMessageAccept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Password: .
        /// </summary>
        internal static string Credentials_Password {
            get {
                return ResourceManager.GetString("Credentials_Password", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please provide proxy credentials:.
        /// </summary>
        internal static string Credentials_ProxyCredentials {
            get {
                return ResourceManager.GetString("Credentials_ProxyCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please provide credentials for: {0}.
        /// </summary>
        internal static string Credentials_RequestCredentials {
            get {
                return ResourceManager.GetString("Credentials_RequestCredentials", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to UserName: .
        /// </summary>
        internal static string Credentials_UserName {
            get {
                return ResourceManager.GetString("Credentials_UserName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No description was provided for this command..
        /// </summary>
        internal static string DefaultCommandDescription {
            get {
                return ResourceManager.GetString("DefaultCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the symbol server.
        /// </summary>
        internal static string DefaultSymbolServer {
            get {
                return ResourceManager.GetString("DefaultSymbolServer", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Delete canceled.
        /// </summary>
        internal static string DeleteCommandCanceled {
            get {
                return ResourceManager.GetString("DeleteCommandCanceled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1} will be deleted from the {2}. Would you like to continue?.
        /// </summary>
        internal static string DeleteCommandConfirm {
            get {
                return ResourceManager.GetString("DeleteCommandConfirm", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} {1} was deleted successfully..
        /// </summary>
        internal static string DeleteCommandDeletedPackage {
            get {
                return ResourceManager.GetString("DeleteCommandDeletedPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deleting {0} {1} from the {2}..
        /// </summary>
        internal static string DeleteCommandDeletingPackage {
            get {
                return ResourceManager.GetString("DeleteCommandDeletingPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Deletes a package from the server..
        /// </summary>
        internal static string DeleteCommandDescription {
            get {
                return ResourceManager.GetString("DeleteCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Do not prompt when deleting..
        /// </summary>
        internal static string DeleteCommandNoPromptDescription {
            get {
                return ResourceManager.GetString("DeleteCommandNoPromptDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the server URL..
        /// </summary>
        internal static string DeleteCommandSourceDescription {
            get {
                return ResourceManager.GetString("DeleteCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the Id and version of the package to delete from the server..
        /// </summary>
        internal static string DeleteCommandUsageDescription {
            get {
                return ResourceManager.GetString("DeleteCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget delete MyPackage 1.0
        ///    
        ///nuget delete MyPackage 1.0 -NoPrompt.
        /// </summary>
        internal static string DeleteCommandUsageExamples {
            get {
                return ResourceManager.GetString("DeleteCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;package Id&gt; &lt;package version&gt; [API Key] [options].
        /// </summary>
        internal static string DeleteCommandUsageSummary {
            get {
                return ResourceManager.GetString("DeleteCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to build &apos;{0}&apos;..
        /// </summary>
        internal static string FailedToBuildProject {
            get {
                return ResourceManager.GetString("FailedToBuildProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found 1 project with a packages.config file. ({0}).
        /// </summary>
        internal static string FoundProject {
            get {
                return ResourceManager.GetString("FoundProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found {0} projects with a packages.config file. ({1}).
        /// </summary>
        internal static string FoundProjects {
            get {
                return ResourceManager.GetString("FoundProjects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print detailed help for all available commands..
        /// </summary>
        internal static string HelpCommandAll {
            get {
                return ResourceManager.GetString("HelpCommandAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays general help information and help information about other commands..
        /// </summary>
        internal static string HelpCommandDescription {
            get {
                return ResourceManager.GetString("HelpCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Print detailed all help in markdown format..
        /// </summary>
        internal static string HelpCommandMarkdown {
            get {
                return ResourceManager.GetString("HelpCommandMarkdown", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pass a command name to display help information for that command..
        /// </summary>
        internal static string HelpCommandUsageDescription {
            get {
                return ResourceManager.GetString("HelpCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget help
        ///
        ///nuget help push
        ///
        ///nuget ?
        ///
        ///nuget push -?.
        /// </summary>
        internal static string HelpCommandUsageExamples {
            get {
                return ResourceManager.GetString("HelpCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [command].
        /// </summary>
        internal static string HelpCommandUsageSummary {
            get {
                return ResourceManager.GetString("HelpCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Installs a package using the specified sources. If no sources are specified, all sources defined in %AppData%\NuGet\NuGet.config are used.  If NuGet.config specifies no sources, uses the default NuGet feed..
        /// </summary>
        internal static string InstallCommandDescription {
            get {
                return ResourceManager.GetString("InstallCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to If set, the destination folder will contain only the package name, not the version number.
        /// </summary>
        internal static string InstallCommandExcludeVersionDescription {
            get {
                return ResourceManager.GetString("InstallCommandExcludeVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; contains invalid package references. .
        /// </summary>
        internal static string InstallCommandInvalidPackageReference {
            get {
                return ResourceManager.GetString("InstallCommandInvalidPackageReference", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All packages listed in {0} are already installed..
        /// </summary>
        internal static string InstallCommandNothingToInstall {
            get {
                return ResourceManager.GetString("InstallCommandNothingToInstall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the directory in which packages will be installed. If none specified, uses the current directory..
        /// </summary>
        internal static string InstallCommandOutputDirDescription {
            get {
                return ResourceManager.GetString("InstallCommandOutputDirDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package &quot;{0}&quot; is already installed..
        /// </summary>
        internal static string InstallCommandPackageAlreadyExists {
            get {
                return ResourceManager.GetString("InstallCommandPackageAlreadyExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version string specified for package reference &apos;{0}&apos; is invalid..
        /// </summary>
        internal static string InstallCommandPackageReferenceInvalidVersion {
            get {
                return ResourceManager.GetString("InstallCommandPackageReferenceInvalidVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows prerelease packages to be installed. This flag is not required when restoring packages by installing from packages.config..
        /// </summary>
        internal static string InstallCommandPrerelease {
            get {
                return ResourceManager.GetString("InstallCommandPrerelease", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of packages sources to use for the install..
        /// </summary>
        internal static string InstallCommandSourceDescription {
            get {
                return ResourceManager.GetString("InstallCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the id and optionally the version of the package to install. If a path to a packages.config file is used instead of an id, all the packages it contains are installed..
        /// </summary>
        internal static string InstallCommandUsageDescription {
            get {
                return ResourceManager.GetString("InstallCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget install elmah
        ///
        ///nuget install packages.config
        ///
        ///nuget install ninject -o c:\foo.
        /// </summary>
        internal static string InstallCommandUsageExamples {
            get {
                return ResourceManager.GetString("InstallCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to packageId|pathToPackagesConfig [options].
        /// </summary>
        internal static string InstallCommandUsageSummary {
            get {
                return ResourceManager.GetString("InstallCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The version of the package to install..
        /// </summary>
        internal static string InstallCommandVersionDescription {
            get {
                return ResourceManager.GetString("InstallCommandVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: invalid arguments..
        /// </summary>
        internal static string InvalidArguments {
            get {
                return ResourceManager.GetString("InvalidArguments", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No packages.config or solution file specified. Use the -self switch to update NuGet.exe..
        /// </summary>
        internal static string InvalidFile {
            get {
                return ResourceManager.GetString("InvalidFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid option value: &apos;{0} {1}&apos;.
        /// </summary>
        internal static string InvalidOptionValueError {
            get {
                return ResourceManager.GetString("InvalidOptionValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified source &apos;{0}&apos; is invalid. Please provide a valid source..
        /// </summary>
        internal static string InvalidSource {
            get {
                return ResourceManager.GetString("InvalidSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to List all versions of a package. By default, only the latest package version is displayed..
        /// </summary>
        internal static string ListCommandAllVersionsDescription {
            get {
                return ResourceManager.GetString("ListCommandAllVersionsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays a list of packages from a given source. If no sources are specified, all sources defined in %AppData%\NuGet\NuGet.config are used. If NuGet.config specifies no sources, uses the default NuGet feed..
        /// </summary>
        internal static string ListCommandDescription {
            get {
                return ResourceManager.GetString("ListCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No packages found..
        /// </summary>
        internal static string ListCommandNoPackages {
            get {
                return ResourceManager.GetString("ListCommandNoPackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allow prerelease packages to be shown..
        /// </summary>
        internal static string ListCommandPrerelease {
            get {
                return ResourceManager.GetString("ListCommandPrerelease", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of packages sources to search..
        /// </summary>
        internal static string ListCommandSourceDescription {
            get {
                return ResourceManager.GetString("ListCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify optional search terms..
        /// </summary>
        internal static string ListCommandUsageDescription {
            get {
                return ResourceManager.GetString("ListCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget list
        ///
        ///nuget list -verbose -allversions.
        /// </summary>
        internal static string ListCommandUsageExamples {
            get {
                return ResourceManager.GetString("ListCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [search terms] [options].
        /// </summary>
        internal static string ListCommandUsageSummary {
            get {
                return ResourceManager.GetString("ListCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Displays a detailed list of information for each package..
        /// </summary>
        internal static string ListCommandVerboseListDescription {
            get {
                return ResourceManager.GetString("ListCommandVerboseListDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to the NuGet gallery.
        /// </summary>
        internal static string LiveFeed {
            get {
                return ResourceManager.GetString("LiveFeed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looking for installed packages in &apos;{0}&apos;..
        /// </summary>
        internal static string LookingForInstalledPackages {
            get {
                return ResourceManager.GetString("LookingForInstalledPackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Missing option value for: &apos;{0}&apos;.
        /// </summary>
        internal static string MissingOptionValueError {
            get {
                return ResourceManager.GetString("MissingOptionValueError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No API Key was provided and no API Key could be found for {0}. To save an API Key for a source use the &apos;setApiKey&apos; command..
        /// </summary>
        internal static string NoApiKeyFound {
            get {
                return ResourceManager.GetString("NoApiKeyFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No projects found with packages.config..
        /// </summary>
        internal static string NoProjectsFound {
            get {
                return ResourceManager.GetString("NoProjectsFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No updates available for &apos;{0}&apos;..
        /// </summary>
        internal static string NoUpdatesAvailable {
            get {
                return ResourceManager.GetString("NoUpdatesAvailable", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NuGet official package source.
        /// </summary>
        internal static string OfficialPackageSourceName {
            get {
                return ResourceManager.GetString("OfficialPackageSourceName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [option] on &apos;{0}&apos; is invalid without a setter..
        /// </summary>
        internal static string OptionInvalidWithoutSetter {
            get {
                return ResourceManager.GetString("OptionInvalidWithoutSetter", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Added file &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandAddedFile {
            get {
                return ResourceManager.GetString("PackageCommandAddedFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to build package from &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandAttemptingToBuildPackage {
            get {
                return ResourceManager.GetString("PackageCommandAttemptingToBuildPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Attempting to build symbols package for &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandAttemptingToBuildSymbolsPackage {
            get {
                return ResourceManager.GetString("PackageCommandAttemptingToBuildSymbolsPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The base path of the files defined in the nuspec file..
        /// </summary>
        internal static string PackageCommandBasePathDescription {
            get {
                return ResourceManager.GetString("PackageCommandBasePathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if the project should be built before building the package..
        /// </summary>
        internal static string PackageCommandBuildDescription {
            get {
                return ResourceManager.GetString("PackageCommandBuildDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Creates a NuGet package based on the specified nuspec or project file..
        /// </summary>
        internal static string PackageCommandDescription {
            get {
                return ResourceManager.GetString("PackageCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies one or more wildcard patterns to exclude when creating a package..
        /// </summary>
        internal static string PackageCommandExcludeDescription {
            get {
                return ResourceManager.GetString("PackageCommandExcludeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File from dependency is changed. Adding file &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandFileFromDependencyIsChanged {
            get {
                return ResourceManager.GetString("PackageCommandFileFromDependencyIsChanged", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File from dependency is not changed. File &apos;{0}&apos; is not added..
        /// </summary>
        internal static string PackageCommandFileFromDependencyIsNotChanged {
            get {
                return ResourceManager.GetString("PackageCommandFileFromDependencyIsNotChanged", resourceCulture);
            }
        }

        /// <summary>
        ///   Looks up a localized string similar to Description: {0}.
        /// </summary>
        internal static string PackageCommandIssueDescription {
            get {
                return ResourceManager.GetString("PackageCommandIssueDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Solution: {0}.
        /// </summary>
        internal static string PackageCommandIssueSolution {
            get {
                return ResourceManager.GetString("PackageCommandIssueSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Issue: {0}.
        /// </summary>
        internal static string PackageCommandIssueTitle {
            get {
                return ResourceManager.GetString("PackageCommandIssueTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Prevent default exclusion of NuGet package files and files and folders starting with a dot e.g. .svn..
        /// </summary>
        internal static string PackageCommandNoDefaultExcludes {
            get {
                return ResourceManager.GetString("PackageCommandNoDefaultExcludes", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to build package. Ensure &apos;{0}&apos; includes assembly files. For help on building symbols package, visit {1}..
        /// </summary>
        internal static string PackageCommandNoFilesForLibPackage {
            get {
                return ResourceManager.GetString("PackageCommandNoFilesForLibPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Failed to build package. Ensure &apos;{0}&apos; includes source and symbol files. For help on building symbols package, visit {1}..
        /// </summary>
        internal static string PackageCommandNoFilesForSymbolsPackage {
            get {
                return ResourceManager.GetString("PackageCommandNoFilesForSymbolsPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify if the command should not run package analysis after building the package..
        /// </summary>
        internal static string PackageCommandNoRunAnalysis {
            get {
                return ResourceManager.GetString("PackageCommandNoRunAnalysis", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the directory for the created NuGet package file. If not specified, uses the current directory..
        /// </summary>
        internal static string PackageCommandOutputDirDescription {
            get {
                return ResourceManager.GetString("PackageCommandOutputDirDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} issue(s) found with package &apos;{1}&apos;..
        /// </summary>
        internal static string PackageCommandPackageIssueSummary {
            get {
                return ResourceManager.GetString("PackageCommandPackageIssueSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides the ability to specify a semicolon &quot;;&quot; delimited list of properties when creating a package..
        /// </summary>
        internal static string PackageCommandPropertiesDescription {
            get {
                return ResourceManager.GetString("PackageCommandPropertiesDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Please specify a nuspec or project file to use..
        /// </summary>
        internal static string PackageCommandSpecifyInputFileError {
            get {
                return ResourceManager.GetString("PackageCommandSpecifyInputFileError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Successfully created package &apos;{0}&apos;..
        /// </summary>
        internal static string PackageCommandSuccess {
            get {
                return ResourceManager.GetString("PackageCommandSuccess", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if a package containing sources and symbols should be created. When specified with a nuspec, creates a regular NuGet package file and the corresponding symbols package..
        /// </summary>
        internal static string PackageCommandSymbolsDescription {
            get {
                return ResourceManager.GetString("PackageCommandSymbolsDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Determines if the output files of the project should be in the tool folder. .
        /// </summary>
        internal static string PackageCommandToolDescription {
            get {
                return ResourceManager.GetString("PackageCommandToolDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the location of the nuspec or project file to create a package..
        /// </summary>
        internal static string PackageCommandUsageDescription {
            get {
                return ResourceManager.GetString("PackageCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;nuspec | project&gt; [options].
        /// </summary>
        internal static string PackageCommandUsageSummary {
            get {
                return ResourceManager.GetString("PackageCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Shows verbose output for package building..
        /// </summary>
        internal static string PackageCommandVerboseDescription {
            get {
                return ResourceManager.GetString("PackageCommandVerboseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overrides the version number from the nuspec file..
        /// </summary>
        internal static string PackageCommandVersionDescription {
            get {
                return ResourceManager.GetString("PackageCommandVersionDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate &apos;{0} {1}&apos;. Make sure all packages exist in the packages folder before running update..
        /// </summary>
        internal static string PackageDoesNotExist {
            get {
                return ResourceManager.GetString("PackageDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Packing files from &apos;{0}&apos;..
        /// </summary>
        internal static string PackagingFilesFromOutputPath {
            get {
                return ResourceManager.GetString("PackagingFilesFromOutputPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget pack
        ///
        ///nuget pack foo.nuspec
        ///
        ///nuget pack foo.csproj
        ///
        ///nuget pack foo.csproj -Build -Symbols -Properties Configuration=Release
        ///
        ///nuget pack foo.nuspec -Version 2.1.0.
        /// </summary>
        internal static string PackCommandUsageExamples {
            get {
                return ResourceManager.GetString("PackCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Publishes a package that was uploaded to the server but not added to the feed..
        /// </summary>
        internal static string PublishCommandDescription {
            get {
                return ResourceManager.GetString("PublishCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your package was published..
        /// </summary>
        internal static string PublishCommandPackagePublished {
            get {
                return ResourceManager.GetString("PublishCommandPackagePublished", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Publishing {0} {1} to {2}....
        /// </summary>
        internal static string PublishCommandPublishingPackage {
            get {
                return ResourceManager.GetString("PublishCommandPublishingPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the server URL..
        /// </summary>
        internal static string PublishCommandSourceDescription {
            get {
                return ResourceManager.GetString("PublishCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the id and version of the package that will be published to the feed..
        /// </summary>
        internal static string PublishCommandUsageDescription {
            get {
                return ResourceManager.GetString("PublishCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        ///
        ///nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://example.com/nuget-publish-endpoint
        ///
        ///nuget push foo.nupkg
        ///
        ///nuget push foo.nupkg.symbols.
        /// </summary>
        internal static string PublishCommandUsageExamples {
            get {
                return ResourceManager.GetString("PublishCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;package id&gt; &lt;package version&gt; &lt;API Key&gt; [options].
        /// </summary>
        internal static string PublishCommandUsageSummary {
            get {
                return ResourceManager.GetString("PublishCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies if the package should be created and uploaded to the server but not published to the server. False by default..
        /// </summary>
        internal static string PushCommandCreateOnlyDescription {
            get {
                return ResourceManager.GetString("PushCommandCreateOnlyDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pushes a package to the server and optionally publishes it..
        /// </summary>
        internal static string PushCommandDescription {
            get {
                return ResourceManager.GetString("PushCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to There is no default source, please specify a source..
        /// </summary>
        internal static string PushCommandNoSourceError {
            get {
                return ResourceManager.GetString("PushCommandNoSourceError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Your package was pushed..
        /// </summary>
        internal static string PushCommandPackagePushed {
            get {
                return ResourceManager.GetString("PushCommandPackagePushed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Pushing {0} to {1}....
        /// </summary>
        internal static string PushCommandPushingPackage {
            get {
                return ResourceManager.GetString("PushCommandPushingPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specifies the server URL..
        /// </summary>
        internal static string PushCommandSourceDescription {
            get {
                return ResourceManager.GetString("PushCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the path to the package and your API key to push the package to the server..
        /// </summary>
        internal static string PushCommandUsageDescription {
            get {
                return ResourceManager.GetString("PushCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        ///
        ///nuget push foo.nupkg 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -s http://customsource/
        ///
        ///nuget push foo.nupkg
        ///
        ///nuget push foo.nupkg.symbols.
        /// </summary>
        internal static string PushCommandUsageExamples {
            get {
                return ResourceManager.GetString("PushCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;package path&gt; [API key] [options].
        /// </summary>
        internal static string PushCommandUsageSummary {
            get {
                return ResourceManager.GetString("PushCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All.
        /// </summary>
        internal static string ReservedPackageNameAll {
            get {
                return ResourceManager.GetString("ReservedPackageNameAll", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource type &apos;{0}&apos; does not have an accessible get for the &apos;{1}&apos; property..
        /// </summary>
        internal static string ResourcePropertyDoesNotHaveAccessibleGet {
            get {
                return ResourceManager.GetString("ResourcePropertyDoesNotHaveAccessibleGet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The property &apos;{0}&apos; on resource type &apos;{1}&apos; is not a string type..
        /// </summary>
        internal static string ResourcePropertyNotStringType {
            get {
                return ResourceManager.GetString("ResourcePropertyNotStringType", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The resource type &apos;{0}&apos; does not have an accessible static property named &apos;{1}&apos;..
        /// </summary>
        internal static string ResourceTypeDoesNotHaveProperty {
            get {
                return ResourceManager.GetString("ResourceTypeDoesNotHaveProperty", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Scanning for projects....
        /// </summary>
        internal static string ScanningForProjects {
            get {
                return ResourceManager.GetString("ScanningForProjects", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API Key &apos;{0}&apos; was saved for {1}..
        /// </summary>
        internal static string SetApiKeyCommandApiKeySaved {
            get {
                return ResourceManager.GetString("SetApiKeyCommandApiKeySaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The API Key &apos;{0}&apos; was saved for {1} and {2}..
        /// </summary>
        internal static string SetApiKeyCommandDefaultApiKeysSaved {
            get {
                return ResourceManager.GetString("SetApiKeyCommandDefaultApiKeysSaved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Saves an API key for a given server URL. When no URL is provided API key is saved for the NuGet gallery..
        /// </summary>
        internal static string SetApiKeyCommandDescription {
            get {
                return ResourceManager.GetString("SetApiKeyCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Server URL where the API key is valid..
        /// </summary>
        internal static string SetApiKeyCommandSourceDescription {
            get {
                return ResourceManager.GetString("SetApiKeyCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Specify the API key to save and an optional URL to the server that provided the API key..
        /// </summary>
        internal static string SetApiKeyCommandUsageDescription {
            get {
                return ResourceManager.GetString("SetApiKeyCommandUsageDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a
        ///
        ///nuget setapikey 4003d786-cc37-4004-bfdf-c4f3e8ef9b3a -Source http://example.com/nugetfeed.
        /// </summary>
        internal static string SetApiKeyCommandUsageExamples {
            get {
                return ResourceManager.GetString("SetApiKeyCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;API key&gt; [options].
        /// </summary>
        internal static string SetApiKeyCommandUsageSummary {
            get {
                return ResourceManager.GetString("SetApiKeyCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package source name &apos;All&apos; is a reserved name..
        /// </summary>
        internal static string SourcesCommandAllNameIsReserved {
            get {
                return ResourceManager.GetString("SourcesCommandAllNameIsReserved", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Provides the ability to manage list of sources located in  %AppData%\NuGet\NuGet.config.
        /// </summary>
        internal static string SourcesCommandDescription {
            get {
                return ResourceManager.GetString("SourcesCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Disabled.
        /// </summary>
        internal static string SourcesCommandDisabled {
            get {
                return ResourceManager.GetString("SourcesCommandDisabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Enabled.
        /// </summary>
        internal static string SourcesCommandEnabled {
            get {
                return ResourceManager.GetString("SourcesCommandEnabled", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source specified is invalid. Please provide a valid source..
        /// </summary>
        internal static string SourcesCommandInvalidSource {
            get {
                return ResourceManager.GetString("SourcesCommandInvalidSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Name of the source..
        /// </summary>
        internal static string SourcesCommandNameDescription {
            get {
                return ResourceManager.GetString("SourcesCommandNameDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name specified cannot be empty. Please provide a valid name..
        /// </summary>
        internal static string SourcesCommandNameRequired {
            get {
                return ResourceManager.GetString("SourcesCommandNameRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find any package source(s) matching name: {0}..
        /// </summary>
        internal static string SourcesCommandNoMatchingSourcesFound {
            get {
                return ResourceManager.GetString("SourcesCommandNoMatchingSourcesFound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to No sources found..
        /// </summary>
        internal static string SourcesCommandNoSources {
            get {
                return ResourceManager.GetString("SourcesCommandNoSources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Registered Sources:.
        /// </summary>
        internal static string SourcesCommandRegisteredSources {
            get {
                return ResourceManager.GetString("SourcesCommandRegisteredSources", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package Source with Name: {0} added successfully..
        /// </summary>
        internal static string SourcesCommandSourceAddedSuccessfully {
            get {
                return ResourceManager.GetString("SourcesCommandSourceAddedSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the package(s) source..
        /// </summary>
        internal static string SourcesCommandSourceDescription {
            get {
                return ResourceManager.GetString("SourcesCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package source with Name: {0} disabled successfully..
        /// </summary>
        internal static string SourcesCommandSourceDisabledSuccessfully {
            get {
                return ResourceManager.GetString("SourcesCommandSourceDisabledSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package source with Name: {0} enabled successfully..
        /// </summary>
        internal static string SourcesCommandSourceEnabledSuccessfully {
            get {
                return ResourceManager.GetString("SourcesCommandSourceEnabledSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package source with Name: {0} removed successfully..
        /// </summary>
        internal static string SourcesCommandSourceRemovedSuccessfully {
            get {
                return ResourceManager.GetString("SourcesCommandSourceRemovedSuccessfully", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source specified cannot be empty. Please provide a valid source..
        /// </summary>
        internal static string SourcesCommandSourceRequired {
            get {
                return ResourceManager.GetString("SourcesCommandSourceRequired", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The name specified has already been added to the list of available package sources. Please provide a unique name..
        /// </summary>
        internal static string SourcesCommandUniqueName {
            get {
                return ResourceManager.GetString("SourcesCommandUniqueName", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The source specified has already been added to the list of available package sources. Please provide a unique source..
        /// </summary>
        internal static string SourcesCommandUniqueSource {
            get {
                return ResourceManager.GetString("SourcesCommandUniqueSource", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &lt;List|Add|Remove|Enable|Disable&gt; -Name [name] -Source [source].
        /// </summary>
        internal static string SourcesCommandUsageSummary {
            get {
                return ResourceManager.GetString("SourcesCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Assembly to use for metadata..
        /// </summary>
        internal static string SpecCommandAssemblyPathDescription {
            get {
                return ResourceManager.GetString("SpecCommandAssemblyPathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Created &apos;{0}&apos; successfully..
        /// </summary>
        internal static string SpecCommandCreatedNuSpec {
            get {
                return ResourceManager.GetString("SpecCommandCreatedNuSpec", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Generates a nuspec for a new package. If this command is run in the same folder as a project file (.csproj, .vbproj, .fsproj), it will create a tokenized nuspec file..
        /// </summary>
        internal static string SpecCommandDescription {
            get {
                return ResourceManager.GetString("SpecCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; already exists, use -f to overwrite it..
        /// </summary>
        internal static string SpecCommandFileExists {
            get {
                return ResourceManager.GetString("SpecCommandFileExists", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Overwrite nuspec file if it exists..
        /// </summary>
        internal static string SpecCommandForceDescription {
            get {
                return ResourceManager.GetString("SpecCommandForceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget spec
        ///
        ///nuget spec MyPackage
        ///
        ///nuget spec -a MyAssembly.dll.
        /// </summary>
        internal static string SpecCommandUsageExamples {
            get {
                return ResourceManager.GetString("SpecCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to [package id].
        /// </summary>
        internal static string SpecCommandUsageSummary {
            get {
                return ResourceManager.GetString("SpecCommandUsageSummary", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to change from type &apos;{0}&apos; to &apos;{1}&apos;..
        /// </summary>
        internal static string UnableToConvertTypeError {
            get {
                return ResourceManager.GetString("UnableToConvertTypeError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to extract metadata from &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToExtractAssemblyMetadata {
            get {
                return ResourceManager.GetString("UnableToExtractAssemblyMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find &apos;{0}&apos;. Make sure the project has been built..
        /// </summary>
        internal static string UnableToFindBuildOutput {
            get {
                return ResourceManager.GetString("UnableToFindBuildOutput", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to File does not exists ({0})..
        /// </summary>
        internal static string UnableToFindFile {
            get 
			{
                return ResourceManager.GetString("UnableToFindFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find &apos;{0}&apos;. Make sure they are specified in packages.config..
        /// </summary>
        internal static string UnableToFindPackages {
            get {
                return ResourceManager.GetString("UnableToFindPackages", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find solution &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToFindSolution {
            get {
                return ResourceManager.GetString("UnableToFindSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate the packages folder. Try specifying it using the repositoryPath switch..
        /// </summary>
        internal static string UnableToLocatePackagesFolder {
            get {
                return ResourceManager.GetString("UnableToLocatePackagesFolder", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to locate project file for &apos;{0}&apos;..
        /// </summary>
        internal static string UnableToLocateProjectFile {
            get {
                return ResourceManager.GetString("UnableToLocateProjectFile", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown command: &apos;{0}&apos;.
        /// </summary>
        internal static string UnknowCommandError {
            get {
                return ResourceManager.GetString("UnknowCommandError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unknown option: &apos;{0}&apos;.
        /// </summary>
        internal static string UnknownOptionError {
            get {
                return ResourceManager.GetString("UnknownOptionError", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Checking for updates from {0}..
        /// </summary>
        internal static string UpdateCommandCheckingForUpdates {
            get {
                return ResourceManager.GetString("UpdateCommandCheckingForUpdates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Currently running NuGet.exe {0}..
        /// </summary>
        internal static string UpdateCommandCurrentlyRunningNuGetExe {
            get {
                return ResourceManager.GetString("UpdateCommandCurrentlyRunningNuGetExe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update packages to latest available versions. This command also updates NuGet.exe itself..
        /// </summary>
        internal static string UpdateCommandDescription {
            get {
                return ResourceManager.GetString("UpdateCommandDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Package ids to update..
        /// </summary>
        internal static string UpdateCommandIdDescription {
            get {
                return ResourceManager.GetString("UpdateCommandIdDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to NuGet.exe is up to date..
        /// </summary>
        internal static string UpdateCommandNuGetUpToDate {
            get {
                return ResourceManager.GetString("UpdateCommandNuGetUpToDate", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Allows updating to prerelease versions. This flag is not required when updating prerelease packages that are already installed..
        /// </summary>
        internal static string UpdateCommandPrerelease {
            get {
                return ResourceManager.GetString("UpdateCommandPrerelease", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Path to the local packages folder (location where packages are installed)..
        /// </summary>
        internal static string UpdateCommandRepositoryPathDescription {
            get {
                return ResourceManager.GetString("UpdateCommandRepositoryPathDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Looks for updates with the highest version available within the same major and minor version as the installed package..
        /// </summary>
        internal static string UpdateCommandSafeDescription {
            get {
                return ResourceManager.GetString("UpdateCommandSafeDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update the running NuGet.exe to the newest version available from the server..
        /// </summary>
        internal static string UpdateCommandSelfDescription {
            get {
                return ResourceManager.GetString("UpdateCommandSelfDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A list of package sources to search for updates..
        /// </summary>
        internal static string UpdateCommandSourceDescription {
            get {
                return ResourceManager.GetString("UpdateCommandSourceDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to find &apos;{0}&apos; package..
        /// </summary>
        internal static string UpdateCommandUnableToFindPackage {
            get {
                return ResourceManager.GetString("UpdateCommandUnableToFindPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid NuGet.CommandLine package. Unable to locate NuGet.exe within the package..
        /// </summary>
        internal static string UpdateCommandUnableToLocateNuGetExe {
            get {
                return ResourceManager.GetString("UpdateCommandUnableToLocateNuGetExe", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update successful..
        /// </summary>
        internal static string UpdateCommandUpdateSuccessful {
            get {
                return ResourceManager.GetString("UpdateCommandUpdateSuccessful", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating NuGet.exe to {0}..
        /// </summary>
        internal static string UpdateCommandUpdatingNuGet {
            get {
                return ResourceManager.GetString("UpdateCommandUpdatingNuGet", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to nuget update
        ///    
        ///nuget update -Safe
        ///
        ///nuget update -Self.
        /// </summary>
        internal static string UpdateCommandUsageExamples {
            get {
                return ResourceManager.GetString("UpdateCommandUsageExamples", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Show verbose output while updating..
        /// </summary>
        internal static string UpdateCommandVerboseDescription {
            get {
                return ResourceManager.GetString("UpdateCommandVerboseDescription", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating &apos;{0}&apos; to &apos;{1}&apos;..
        /// </summary>
        internal static string UpdatingPackage {
            get {
                return ResourceManager.GetString("UpdatingPackage", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Updating &apos;{0}&apos;....
        /// </summary>
        internal static string UpdatingProject {
            get {
                return ResourceManager.GetString("UpdatingProject", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Using &apos;{0}&apos; for metadata..
        /// </summary>
        internal static string UsingNuspecForMetadata {
            get {
                return ResourceManager.GetString("UsingNuspecForMetadata", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found packages.config. Using packages listed as dependencies.
        /// </summary>
        internal static string UsingPackagesConfigForDependencies {
            get {
                return ResourceManager.GetString("UsingPackagesConfigForDependencies", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The value &quot;{0}&quot; for {1} is a sample value and should be removed..
        /// </summary>
        internal static string Warning_DefaultSpecValue {
            get {
                return ResourceManager.GetString("Warning_DefaultSpecValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Replace with an appropriate value or remove and it and rebuild your package..
        /// </summary>
        internal static string Warning_DefaultSpecValueSolution {
            get {
                return ResourceManager.GetString("Warning_DefaultSpecValueSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Remove sample nuspec values..
        /// </summary>
        internal static string Warning_DefaultSpecValueTitle {
            get {
                return ResourceManager.GetString("Warning_DefaultSpecValueTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; was included in the project but doesn&apos;t exist. Skipping....
        /// </summary>
        internal static string Warning_FileDoesNotExist {
            get {
                return ResourceManager.GetString("Warning_FileDoesNotExist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unpublished packages are no longer supported. Associated commands and properties would be removed in future versions..
        /// </summary>
        internal static string Warning_PublishPackageDeprecated {
            get {
                return ResourceManager.GetString("Warning_PublishPackageDeprecated", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Version &quot;{0}&quot; does not follow semantic versioning guidelines..
        /// </summary>
        internal static string Warning_SemanticVersion {
            get {
                return ResourceManager.GetString("Warning_SemanticVersion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Update your nuspec file or use the AssemblyInformationalVersion assembly attribute to specify a semantic version as described at http://semver.org. .
        /// </summary>
        internal static string Warning_SemanticVersionSolution {
            get {
                return ResourceManager.GetString("Warning_SemanticVersionSolution", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use semantic versioning.
        /// </summary>
        internal static string Warning_SemanticVersionTitle {
            get {
                return ResourceManager.GetString("Warning_SemanticVersionTitle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Found symbols package &apos;{0}&apos;, but no API key was specified for the symbol server. To save an API Key, run &apos;NuGet.exe setApiKey [your API key from http://www.NuGet.org]&apos;..
        /// </summary>
        internal static string Warning_SymbolServerNotConfigured {
            get {
                return ResourceManager.GetString("Warning_SymbolServerNotConfigured", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} was not specified. Using &apos;{1}&apos;..
        /// </summary>
        internal static string Warning_UnspecifiedField {
            get {
                return ResourceManager.GetString("Warning_UnspecifiedField", resourceCulture);
            }
        }
    }
}
