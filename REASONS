Well lately I've been a heavy user of NuGet packaging, trying to tame versioning issues in some proprietary projects I work on that evolve, and partly reuse, near to a hundred libraries (many of them in vertically-dependent sets aligned to 'plugins' in the applications).

Let's put it bluntly: IT'S A NIGHTMARE. 

First of all, we have many solutions as it is unfeasible to load and work with a single one containing hundreds of projects.

Also we needed to organize source in a hierarchy of folders, for subsystems, for specific plugin trees, for product, separating test projects, etc... So it means we have tree of folders with projects in leafs, nested 3,4, or more levels down from the solution that uses them.

Finally, we have solutions that share some projects (one of the purposes of adopting NuGet is to avoid this pattern, but we aren't there yet).

Summing up the above points, we are very very far from the NuGet assumption of a single-solution, with all projects nested just one level, and mainly using external NuGets from the standard source feed.

<digression>
The standard NuGet feed is rarely used by us, because most packages there just don't support .NET 2.0, which our projects are still bound to, the sole package we could use from there was log4net, which is stable for some years, The rest we needed to cook our own versions of nugets for  Npgsql, nHibernate 1.2, Castle.ActiveRecord 1.0RC3, and so on. 
All of this is published on a server shared folder, as we doesn't have time allowance to setup a NuGet server
</digression>

Let's just exemplify what all that means...

A contrived and simplified scenario:

Library NugetCracker.Core 1.0.0.0  depends only on framework assemblies.
Library NugetCracker.CLI 1.0.0.0 depends on NugetCracker.Core 1.0.0.0 and framework assemblies
Library NugetCracker.Web 1.0.0.0 depends on NugetCracker.Core 1.0.0.0 and NancyFX and framework assemblies
Program NugetCracker 1.0.0.0 depends on NugetCracker.CLI 1.0.0.0 and NugetCracker.Web 1.0.0.0

Now if we allow the Package Manager to get away with forcing bindingRedirects in the app.config (or web.config), we could publish a new nuget for NugetCracker.Core 1.0.1.0 and update just the NugetCracker program:

  <runtime>
    <assemblyBinding xmlns="urn:schemas-microsoft-com:asm.v1">
      <dependentAssembly>
        <assemblyIdentity name="NugetCracker.Core" publicKeyToken="4d2b94b6b4a6df75" culture="neutral" />
        <bindingRedirect oldVersion="0.0.0.0-1.0.1.0" newVersion="1.0.1.0" />
      </dependentAssembly>
    </assemblyBinding>
  </runtime>

Now this may work if the changes were non-breaking, but if, for example, we add a new method to some interface in core that the other libraries implement and the program uses, we will have to 
update the intermediary nugets, build and publish these new nugets, and them update the program. 

I think that now you can easily extrapolate that for my real scenario that means many iterations of building/publishing/updating across many solutions.

Well time to fast-forward to what I expect to be able to do when NugetCracker 1.0 is done:

In the command line:

> NugetCracker
NugetCracker 1.0
See https://github.com/monoman/NugetCracker

Using C:\Projects\NugetCracker\MetaProject.NugetCracker
    Directories that will be scanned:
        .
    Directories that won't be scanned:
        tools\
    Scanning '.' > 'C:\Projects\NugetCracker'
    Scanned 80 directories
    Found 4 components
    Sorting...
    Finding dependents...
Ready > help
    Available Commands:
        AddExcludedDir  Add directory to exclusion list
        BumpVersion     Bumps up a version for a component
        FixReferences   Fix project references to nuget components
        Help, ?         Show this list of commands or an specific command help
        List            List components, optionally filtered by regular expression
        Nugetify        Turns a project component into a nuget and fix references
        Quit, Exit      Stops interactive mode
        Rebuild         Rebuilds current version of matched components
        Scan            Scans back all the directories
Ready > list -g
    Listing all components...
    -- grouped by type
    =========== [C# Console Application Project]
    [0001] NugetCracker.1.0 - Tool for webs of Nugets  [C# Console Application Project - net40]
    =========== [C# Nuget Project]
    [0002] NugetCracker.Core.1.0 - Core NugetCracker Library [C# Nuget Project - net40]
    [0003] NugetCracker.CLI.1.0 - Console UI NugetCracker Library [C# Nuget Project - net40]
    [0004] NugetCracker.Web.1.0 - Web UI NugetCracker Library [C# Nuget Project - net20]
Ready > help bumpversion
    Usage:

    B[umpVersion] [options] pattern

        Bumps up the [AssemblyVersion]/Package Version of the component and rebuilds/repackages.
        The [AssemblyFileVersion] attribute also is kept in sync with the [AssemblyVersion].

        Options
        -part:major|minor|build|revision|none
                Increments the major, minor, build, revision version number.
                If option is ommitted the default is to increment build number.
        -cascade
                Update all dependent components to use the new build/package, and them their dependent
                components and so on. If some components generate a Nuget, the Nuget is published to
                a temporary output 'source' and the dependent components have their package references
                updated.
Ready > bumpversion -part:minor -cascade NugetCracker.Core
    Bumping component 'NugetCracker.Core' version from 1.0 to 1.1
    ==== cascading
    Setting new version to 1.1
    Building NugetCracker.Core.1.1
        Microsoft (R) Build Engine Version 4.0.30319.1
        [Microsoft .NET Framework, Version 4.0.30319.431]
        Copyright (C) Microsoft Corporation 2007. All rights reserved.
    Packaging NugetCracker.Core.1.1
        Attempting to build package from 'NugetCracker.Core.csproj'.
        Packing files from 'C:\Projects\NugetCracker\NugetCracker.Core\bin\Debug'.
        Using 'OpenCS.MTrusted.AspNet.Components.nuspec' for metadata.
        Successfully created package 'C:\Projects\NugetCracker\NugetPackages\NugetCracker.Core.1.1.nupkg'.
    Updating references to package 'NugetCracker.Core.1.1.nupkg'
        Installing package NugetCracker.Core in 'C:\Projects\NugetCracker\packages'
    Bumping component 'NugetCracker.CLI' version from 1.0 to 1.1
    Setting new version to 1.1
    Building NugetCracker.CLI.1.1
        Microsoft (R) Build Engine Version 4.0.30319.1
        [Microsoft .NET Framework, Version 4.0.30319.431]
        Copyright (C) Microsoft Corporation 2007. All rights reserved.
    Packaging NugetCracker.CLI.1.1
        Attempting to build package from 'NugetCracker.CLI.csproj'.
        Packing files from 'C:\Projects\NugetCracker\NugetCracker.CLI\bin\Debug'.
        Using 'OpenCS.MTrusted.AspNet.Components.nuspec' for metadata.
        Successfully created package 'C:\Projects\NugetCracker\NugetPackages\NugetCracker.CLI.1.1.nupkg'.
    Updating references to package 'NugetCracker.CLI.1.1.nupkg'
        Installing package NugetCracker.CLI in 'C:\Projects\NugetCracker\packages'
    Bumping component 'NugetCracker.Web' version from 1.0 to 1.1
    Setting new version to 1.1
    Building NugetCracker.Web.1.1
        Microsoft (R) Build Engine Version 4.0.30319.1
        [Microsoft .NET Framework, Version 4.0.30319.431]
        Copyright (C) Microsoft Corporation 2007. All rights reserved.
    Packaging NugetCracker.Web.1.1
        Attempting to build package from 'NugetCracker.Web.csproj'.
        Packing files from 'C:\Projects\NugetCracker\NugetCracker.Web\bin\Debug'.
        Using 'OpenCS.MTrusted.AspNet.Components.nuspec' for metadata.
        Successfully created package 'C:\Projects\NugetCracker\NugetPackages\NugetCracker.Web.1.1.nupkg'.
    Updating references to package 'NugetCracker.Web.1.1.nupkg'
        Installing package NugetCracker.Web in 'C:\Projects\NugetCracker\packages'
    Bumping component 'NugetCracker' version from 1.0 to 1.1
    Setting new version to 1.1
    Building NugetCracker.1.1
        Microsoft (R) Build Engine Version 4.0.30319.1
        [Microsoft .NET Framework, Version 4.0.30319.431]
        Copyright (C) Microsoft Corporation 2007. All rights reserved.
Command > PublishTo -Apikey xxxxxxx -Source http://nuget.mycompany.com/
Publishing NugetCracker.Core.1.1 to http://nuget.mycompany.com/
Publishing NugetCracker.CLI.1.1 to http://nuget.mycompany.com/
Publishing NugetCracker.Web.1.1 to http://nuget.mycompany.com/

Already an "alpha-quality" reality...